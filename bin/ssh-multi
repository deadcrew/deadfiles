#!/bin/bash

set -euo pipefail

:main() {
    local login
    local quiet
    local ask_pass
    local ssh_args
    local remote_command=()
    local servers=()

    :parse-args login ask_pass ssh_args remote_command quiet servers "${@}"

    if [ $? -gt 0 ]; then
        exit 1
    fi

    local password=$(:read-password $ask_pass)
    local ssh_cmd_line=$(:get-ssh-cmdline "$ssh_args" "$login")

    if $ask_pass; then
        ssh_cmd_line+=' -oControlPath=none'
    fi

    local joined_command=$(paste -sd' ' <<< ${remote_command[@]})

    :run "$password" "$ssh_cmd_line" "$joined_command" "$quiet" "${servers[@]}"
}


:parse-args() {
    local login_var=$1
    local ask_pass_var=$2
    local ssh_args_var=$3
    local remote_command_var=$4
    local quiet_var=$5
    local servers_var=$6

    shift 6

    eval $login_var=$(whoami)
    eval $ask_pass_var="false"
    eval $quiet_var="false"
    eval $ssh_args_var="-oStrictHostKeyChecking=no"

    eval set -- "$(getopt -o AS:l:hq -- "${@}")"

    while [ $# -gt 0 ]; do
        case "$1" in
            -A)
                eval $ask_pass_var="true"
                ;;
            -S)
                eval $ssh_args_var=$1
                shift
                ;;
            -l)
                eval $login_var=$1
                shift
                ;;
            -q)
                eval $quiet_var="true"
                shift
                ;;
            -h)
                :usage
                exit 1
                ;;
            *)
                ;&
            --)
                shift
                break
                ;;
        esac

        shift
    done

    if [ $# -eq 0 ]; then
        :usage
        exit 1
    fi

    while [ $# -gt 0 -a "${1:-}" != "-" ]; do
        eval $servers_var+=\("$1"\)
        shift
    done

    if [ $# -lt 2 ]; then
        :usage
        exit 1
    fi

    shift

    while [ $# -gt 0 ]; do
        eval $remote_command_var+=\("$1"\)
        shift
    done
}


:get-ssh-cmdline() {
    printf '%s' 'ssh '$ssh_args' -l'$login
}


:read-password() {
    if $ask_pass; then
        echo -n "Password: " >&2
        read -s password && echo >&2
        printf "%s" $password
    fi
}


:run() {
    local password=$1
    local ssh_cmd_line=$2
    local remote_command=$3
    local quiet=$4

    shift 4

    for server in "${@}"; do
        if ! $quiet; then
            echo "[$server]" >&2
        fi

        if ! :ssh-do \
            "$password" "$ssh_cmd_line" "$server" "$quiet" "$remote_command"
        then
            if ! $quiet; then
                echo "[command failed]" >&2
            fi
        fi
    done
}

:ssh-do() {
    local password=$1
    local ssh_cmd_line=$2
    local server=$3
    local quiet=$4
    local remote_command=$5

    if [ "$password" ]; then
        :ssh-pass "${@}"
    else
        $ssh_cmd_line "$server" "$remote_command"
    fi
}


:ssh-pass() {
    local password=$(sed -r 's/"/\"/g' <<< $1)
    local ssh_cmd_line=$2
    local server=$3
    local quiet=$4

    shift 4

    local send_error='send_error "\[connection failed\]\n$expect_out(buffer)"'
    if $quiet; then
        send_error='send_error "$expect_out(buffer)"'
    fi

    expect -f <(cat <<EXPECT
        spawn -noecho $ssh_cmd_line $server \$argv

        log_user 0
        expect {
            assword: {
                send "$password\r"
            } eof {
                $send_error
                exit 1
            }
        }

        interact
EXPECT
    ) "${@}" | tail -n+2  # expect still leaves empty line in place of password
}


:usage() {
    cat <<HELP
Usage: ssh-multi [-A] [-S <ssh-args>] [-l <login>] <server>... - <cmd>...

Options:
    -A             Ask password once and use it for all servers.
    -S <ssh-args>  Additional args to pass to ssh.
    -l <login>     Login to use.
HELP
}

:main "${@}"
