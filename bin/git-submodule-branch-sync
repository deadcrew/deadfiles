#!/bin/bash
#
# checkout branch to master for submodules with `branch = master`

set -euo pipefail

cd "$(git rev-parse --show-toplevel)"

:main() {
    if [[ ! -f .gitmodules ]]; then
        exit 0
    fi

    submodules=$(mktemp)
    directories=$(mktemp)
    trap "rm $submodules $directories" EXIT

    tasks=()
    while read name path branch
    do
        (
            if :update "$name" "$path" "$branch"; then
                echo "$path" >> "$directories"
                echo "$name" >> "$submodules"
            fi
        ) &
        tasks+=($!)
    done < <(:get-submodules .gitmodules)

    if [[ ${#tasks} -ne 0 ]]; then
        wait ${tasks[@]}
        cat "$submodules"
        submodules=($(cat "$submodules"))
        directories=($(cat "$directories"))
        if [[ -v submodules ]]; then
            :commit
        fi
    fi
}

:update() {
    local name="$1"
    local path="$2"
    local branch="$3"

    {
        echo "syncing..."

        cd "$path"
        if [[ "$(git status --porcelain | wc -l)" -ne 0 ]]; then
            echo "dirty tree, skipping"
            exit 1
        fi

        rev=$(git rev-parse --short HEAD)
        output=$(
            git checkout -q "$branch" && \
                git pull -q --rebase origin "$branch"
        )
        if [[ $? -ne 0 ]]; then
            echo -n "$output"
            exit 1
        fi

        if [[ "$(git rev-parse --short HEAD)" = "$rev" ]]; then
            exit 1
        fi
    } 2>&1 | :indent "$name"
}

:indent() {
    local name="$1"
    sed -r "s|^|[$name]: |" >&2
}

:commit() {
    local index=$(git status --porcelain | grep -v '^?? ' | awk '{print $2}')

    git update-index -q --assume-unchanged --stdin <<< "$index"
    git add "${directories[@]}"
    git commit -q -m "submodules: update ${submodules[*]}"
    git update-index -q --no-assume-unchanged --stdin <<< "$index"
}

:get-submodules() {
    local gitmodules="$1"

    awk '{
        if (match($0, "\\[submodule \"(.*)\"", matches)) {
            submodule = matches[1]
            path=""
            branch=""
        }

        if (match($0, "path = (.*)", matches)) {
            path = matches[1]
        }

        if (match($0, "branch = (.*)", matches)) {
            branch = matches[1]

            printf("%s %s %s\n", submodule, path, branch)
        }
    }' $gitmodules
}

:main "$@"
