#!/bin/bash

### stalk - run command in separate kernel namespace.
###
### Examples:
###   stalk --resolv-search=cname.d -- host -t srv _deployerd
###     > will output SRV record for _deployerd.cname.d
###
### Usage:
###   stalk [options] [[--] <command>]
###
### Options:
###   -s --resolv-search=<domain>  Use specified domain as search domain.
###   -o --overlay=<directory>     Use specified directory as overlay
###                                 filesystem for specified <command>.

set -Eeuo pipefail

:main() {
    local -A opts

    trap "printf 'exit 88'" ERR

    eval $(
        args opts \
            -h,--help \
            -o:,--overlay \
            -v \
            -s:,--resolv-search \
            -- "$@"
    )

    trap - ERR

    if [[ "${opts[-h]:-}" ]]; then
        :usage

        exit 0
    fi

    if [[ ! "${opts[-v]:-}" ]]; then
        :debug() {
            :
        }
    fi

    local namespace
    :namespace:new run_namespace

    if [[ "${opts[-o]:-}" ]]; then
        :namespace:overlay-fs run_namespace "${opts[-o]}"
    fi

    local resolvconf
    :resolvconf:new resolvconf

    if [[ "${opts[--resolv-search]:-}" ]]; then
        :debug "{resolv} search ${opts[--resolv-search]}"

        :resolvconf:set-search-domain resolvconf "${opts[--resolv-search]}"
    fi

    local tmpfs
    :tmpfs:new tmpfs
    :tmpfs:write-file tmpfs "/etc/resolv.conf" "$resolvconf"

    :namespace:overlay-fs run_namespace "$tmpfs"
    :namespace:exec run_namespace "$@"
}

:namespace:new() {
    local -n namespace="$1"

    namespace=()
}

:namespace:overlay-fs() {
    local -n namespace="$1"

    local layer="$2"

    local source_file
    local target_file

    if [[ ! -d "$layer" ]]; then
        :fatal "specified overlay argument is not a directory: $layer"
    fi

    for source_file in "$(find "$layer" -mindepth 1 -type f)"; do
        if [[ ! "$source_file" ]]; then
            break
        fi

        target_file=${source_file#$layer}

        :namespace:overlay-file "${!namespace}" "$source_file" "$target_file"
    done
}

:namespace:overlay-file() {
    local -n namespace="$1"

    local source="$2"
    local target="$3"

    :debug "{fs} overlay: $target"

    namespace+=("mount --bind $source $target")
}

:namespace:exec() {
    local -n namespace="$1"
    shift

    if [[ ! "$*" ]]; then
        set -- "$SHELL" -i "< $(tty)"
    fi

    namespace+=("exec sudo -iu $USER $*")

    printf '%s\n' "${namespace[@]}" | while read line; do
        :debug "{bash} $line"
    done

    sudo -i unshare -m bash -c "$(printf "%s;" "${namespace[@]}")"
}

:resolvconf:new() {
    local -n contents="$1"

    contents=$(
        printf '%s\n' "# private resolv.conf file, generated by stalk tool"
        grep -v '^#' /etc/resolv.conf 2>/dev/null
    )
}

:resolvconf:set-search-domain() {
    local -n contents="$1"
    shift

    contents=$(
        sed -r \
            -e '/^search / { ' \
            -e "a\\search $*" \
            -e 'd }' \
            <<< "$contents"
    )
}

:tmpfs:new() {
    local -n directory="$1"

    directory=$(mktemp -d --suffix ".stalk.overlay")

    trap "rm -rf $directory" EXIT
}

:tmpfs:write-file() {
    local -n directory="$1"

    local file="$2"
    local contents="$3"

    local target="$directory/$file"

    mkdir -p "$(dirname "$target")"

    printf '%s' "$contents" > "$target"
}

:debug() {
    highlight bold fg blue

    printf ":: %s\n" "$*"

    highlight reset
}

:fatal() {
    highlight bold fg red

    printf "error: %s\n" "$*"

    highlight reset

    exit 1
}

:usage() {
    sed -nr '/^###/p' "$0" | cut -b5-
}

:main "$@"
