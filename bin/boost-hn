#!/bin/bash

set -euo pipefail

config=~/.config/boost-hn.conf

verbose=0
use_static_remotes=false
use_proxy=false
use_droplets=false

users_offset=0

sleep=60

:parse-args() {
    local __target_id__="$1"
    local __parent_id__="$2"
    shift 2

    eval set -- "$(getopt -o vhs:DRPo: -l help -- "${@}")"

    while [ "${*}" ]; do
        case "$1" in
            -h|--help)
                :usage

                exit 1
                ;;
            -o)
                shift
                users_offset=$1
                ;;
            -D)
                use_droplets=true
                ;;
            -R)
                use_static_remotes=true
                ;;
            -P)
                use_proxy=true
                ;;
            -v)
                verbose=$((verbose + 1))
                ;;
            -s)
                shift
                sleep=$1
                ;;
            --)
                shift
                break
                ;;
        esac

        shift
    done

    if [ -z "${1:-}" ]; then
        :usage

        exit 1
    fi

    :value $__target_id__ echo "$1"
    :value $__parent_id__ echo "${2:-}"
}

:usage() {
    cat <<HELP
Usage:

    boost-hn [options] [-D] [-S] [-P] <id> [<parent-id>]
    boost-hn -h | --help

Notes:

    Use <parent-id> when <id> is a comment ID.

Options:

    -h --help  Show this help.
    -s <sec>   Sleep at least <sec> seconds between votes.
               [default: 60]
    -v         Increase verbosity.
HELP
}

:read-config() {
    local config="$1"

    if ! source "$config"; then
        cat <<HELP
    Config file $config should contains following values:

        digitalocean_token=<token>
        public_key=<ssh_key>
        static_remotes=(
            <host>
            ...
        )
        proxy_list=(
            <host>
            ...
        )
        hn_users=(
            <user>:<password>
            ...
        )
HELP

        exit 1
    fi

    static_remotes=("${static_remotes[@]:-}")
    proxy_list=("${proxy_list[@]:-}")

    hn_users=("${hn_users[@]:$users_offset}")

    if ! { $use_static_remotes || $use_proxy || $use_droplets; }; then
        echo 'Run mode (-D, -R, -P) is not specified.'
        echo

        :usage


        exit 1
    fi
}

:value() {
    eval $1='"$('${@:2}')"'
}

:array() {
    eval $1='($('${@:2}'))'
}

:debug() {
    if [ $verbose -lt 1 ]; then
        cat > /dev/null
        return
    fi

    sed -u 's/^/## /' 1>&2 <<< "${@}"
}

:trace() {
    if [ $verbose -lt 2 ]; then
        cat > /dev/null
        return
    fi

    sed -u 's/^/.. /' 1>&2
}

:info() {
    sed -u 's/^/:: /' 1>&2 <<< "${@}"
}

:eval() {
    :debug "$ $(printf "%q " "${@}")"

    { "${@}" 2>&1 1>&3 | :trace ; } 3>&1
}

:ssh-keygen:fingerprint() {
    ssh-keygen -E md5 -lf "$1" | awk '{ print $2 }' | cut -d: -f2-
}

:digitalocean:do() {
    local token="$1"
    local method="$2"
    local url="$3"
    local data="$(cat)"

    local fd
    exec {fd}<>/dev/null

    {
        _http_code=$(:eval curl -sv \
            --write-out '%{http_code}' \
            -o /proc/self/fd/$fd \
            -X "$method" "https://api.digitalocean.com/v2/$url" \
            -H "Authorization: Bearer $token" \
            -H "Content-Type: application/json" \
            -d "${data}")
    } {fd}>&1

    :debug "~> HTTP $_http_code"
}

:digitalocean:list-regions() {
    :digitalocean:do "$1" GET "regions" \
        | jq -r '.regions[] | .slug'
}

:digitalocean:list-keys() {
    :digitalocean:do "$1" GET "account/keys" \
        | jq -r '.ssh_keys[] | .fingerprint'
}

:digitalocean:add-key() {
    printf '{"name": "boost-hn key", "public_key": "%s"}' "$(cat)" \
        | :digitalocean:do "$1" POST "account/keys"
}


:digitalocean:is-key-exists() {
    :digitalocean:do "$1" GET "account/keys/$2" >/dev/null

    if [ "$_http_code" -eq "200" ]; then
        return 0
    else
        return 1
    fi
}

:digitalocean:create-droplet() {
    printf '{
        "name": "boost-hn-%s",
        "image": "%s",
        "size": "%s",
        "region": "%s",
        "ssh_keys": ["%s"]
    }' "$RANDOM" "ubuntu-14-04-x64" "512mb" "$2" "$3" \
        | :digitalocean:do "$1" POST "droplets" \
        | jq -r '.droplet.id'
}

:digitalocean:get-droplet() {
    :digitalocean:do "$1" GET "droplets/$2"
}

:digitalocean:get-droplet-ip() {
    :digitalocean:get-droplet "$1" "$2" \
        | jq -r '.droplet.networks.v4[0].ip_address'
}

:digitalocean:delete-droplet() {
    :digitalocean:do "$1" DELETE "droplets/$2"

    if [ "$_http_code" -eq "204" ]; then
        return 0
    else
        return 1
    fi
}

:digitalocean:wait-droplet-active() {
    while sleep 5; do
        local status

        :value status :digitalocean:get-droplet "$1" "$2" \
            \| jq -r '.droplet.status'

        :debug "Droplet '$2' status is '$status'"

        if [ "$status" = "active" ]; then
            break
        fi

    done
}

:do-remote-vote() {
    local user_agents=(
        "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; FSL 7.0.6.01001)"
        "Mozilla/5.0 (X11; U; Linux x86_64; de; rv:1.9.2.8) Gecko/20100723 Ubuntu/10.04 (lucid) Firefox/3.6.8"
        "Opera/9.80 (Windows NT 5.1; U; en) Presto/2.10.289 Version/12.01"
        "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 YaBrowser/16.7.0.2846 (beta) Yowser/2.5 Safari/537.36"
        "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/601.6.17 (KHTML, like Gecko) Version/9.1.1 Safari/601.6.17"
        "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko"
    )

    local headers=(
        -H '"origin: https://news.ycombinator.com"'
        -H '"accept-encoding: gzip, deflate, br"'
        -H '"accept-language: en-US,en;q=0.8"'
        -H '"upgrade-insecure-requests: 1"'
        -H '"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"'
        -H '"cache-control: max-age=0"'
        -H '"authority: news.ycombinator.com"'
    )

    local user_agent="${user_agents[$(( RANDOM % ${#user_agents[@]} ))]}"

    local proxy="${7:-}"
    local proxy_addr="${proxy#*@}"
    local proxy_auth="${proxy%@*}"

    :ssh "$1" "$2" <<BASH
        set -o pipefail

        set -x

        curl -svLX POST -c /tmp/curl.cookie-jar -d 'acct=$5&pw=$6' \
            -A '$user_agent' \
            -o /dev/null \
            ${proxy_auth+-U '$proxy_auth'} \
            ${proxy_addr:+-x '$proxy_addr'} \
            ${headers[@]} \
            --compressed \
            https://news.ycombinator.com/login

        for where in {news,show,shownew,newest,item?id=${4:-$3}}; do
            curl -svX GET -b /tmp/curl.cookie-jar -c /tmp/curl.cookie-jar \
                    -A '$user_agent' \
                    ${proxy_auth+-U '$proxy_auth'} \
                    ${proxy_addr:+-x '$proxy_addr'} \
                    ${headers[@]} \
                    --compressed \
                    "https://news.ycombinator.com/\$where" \
                | grep -Po "vote\\?[^'\\"]+" \
                | sed -u -e 's/&amp;/\\&/g' \
                | grep -F 'how=up' \
                | grep -F 'id=$3' \
                | xargs -n1 -I{} curl -svLX GET -b /tmp/curl.cookie-jar \
                    -e "https://news.ycombinator.com/\$where" \
                    -A '$user_agent' \
                    ${proxy_auth+-U '$proxy_auth'} \
                    ${proxy_addr:+-x '$proxy_addr'} \
                    ${headers[@]} \
                    --compressed \
                    "https://news.ycombinator.com/{}"

            if [ \$? -eq 0 ]; then
                break
            fi
        done

BASH
}

:ssh() {
    {
        if [ "$2" = "localhost" ]; then
            bash -s
        else
            while ! \
                ssh \
                    -o ControlPath=none -o StrictHostKeyChecking=no \
                    -i "$1" "$2" "bash -s ; exit 0"
            do
                sleep 5
            done
        fi 2>&1
    } | sed -u 's/^/{remote} /' | :trace
}

:main() {
    local target_id
    local parent_id
    :parse-args target_id parent_id "${@}"

    :read-config "$config"

    :info "Available ${#hn_users[@]} HN accounts"

    if "$use_static_remotes"; then
        local remote_index="0"
        for user in "${hn_users[@]}"; do
            IFS=':' read login password <<< "$user"

            local remote="${static_remotes[$remote_index]:-}"
            if [ -z "${remote:-}" ]; then
                break
            fi

            remote_index=$(( remote_index + 1 ))

            local start_time
            :value start_time date +%s

            :info "Running vote process from login '$login' (remote '$remote')"

            :do-remote-vote "${public_key%*.pub}" "$remote" \
                "$target_id" "$parent_id" "$login" "$password"

            local end_time
            :value end_time date +%s

            local sleep_time="$(( $sleep - $end_time + $start_time ))"
            if [ "$sleep_time" -gt "0" ]; then
                :info "Sleeping for $sleep_time seconds till next vote"

                sleep "$sleep_time"
            fi
        done

        hn_users=("${hn_users[@]:$remote_index}")
        :info "Remaining ${#hn_users[@]} HN accounts"
    fi

    if "$use_proxy"; then
        local proxy_index="0"
        for user in "${hn_users[@]}"; do
            IFS=':' read login password <<< "$user"

            local proxy="${proxy_list[$proxy_index]:-}"
            if [ -z "${proxy}" ]; then
                break
            fi

            proxy_index=$(( proxy_index + 1 ))

            local start_time
            :value start_time date +%s

            :info "Running vote process from login '$login' (proxy '$proxy')"

            :do-remote-vote "${public_key%*.pub}" "localhost" \
                "$target_id" "$parent_id" "$login" "$password" \
                "$proxy"

            local end_time
            :value end_time date +%s

            local sleep_time="$(( $sleep - $end_time + $start_time ))"
            if [ "$sleep_time" -gt "0" ]; then
                :info "Sleeping for $sleep_time seconds till next vote"

                sleep "$sleep_time"
            fi
        done

        hn_users=("${hn_users[@]:$proxy_index}")
        :info "Remaining ${#hn_users[@]} HN accounts"
    fi

    if "$use_droplets"; then
        local fingerprint
        :value fingerprint :ssh-keygen:fingerprint "$public_key"

        :info "Checking SSH key with fingerprint '$fingerprint'"

        if ! :digitalocean:is-key-exists "$digitalocean_token" "$fingerprint"; then
            :info "SSH key is not found, adding"

            local keys
            :array keys :digitalocean:list-keys "$digitalocean_token"

            :digitalocean:add-key "$digitalocean_token" < "$public_key"
        fi

        :info "Obtaining list of regions from Digital Ocean"

        local regions
        :array regions :digitalocean:list-regions "$digitalocean_token"

        :info "Available regions list: [${regions[@]}]"

        for user in "${hn_users[@]}"; do
            IFS=':' read login password <<< "$user"

            local start_time
            :value start_time date +%s

            :info "Running vote process from login '$login'"

            local region="${regions[$(( RANDOM % ${#regions[@]} ))]}"

            local droplet_id
            :info "Creating Droplet in the '$region' region"
            :value droplet_id :digitalocean:create-droplet \
                "$digitalocean_token" "$region" "$fingerprint"

            :info "Waiting Droplet '$droplet_id' to activate"
            :digitalocean:wait-droplet-active "$digitalocean_token" "$droplet_id"

            :info "Retrieving Droplet '$droplet_id' IP Address"
            :value droplet_ip :digitalocean:get-droplet-ip \
                "$digitalocean_token" "$droplet_id"

            :info "Opening SSH session into Droplet '$droplet_id' ($droplet_ip)"
            :do-remote-vote "${public_key%*.pub}" "root@$droplet_ip" \
                "$target_id" "$parent_id" "$login" "$password"

            :info "Destroying Droplet '$droplet_id'"
            if ! :digitalocean:delete-droplet "$digitalocean_token" "$droplet_id"
            then
                :info "Can't destroy droplet '$droplet_id'"
                exit 1
            fi

            local end_time
            :value end_time date +%s

            local sleep_time="$(( $sleep - $end_time + $start_time ))"
            if [ "$sleep_time" -gt "0" ]; then
                :info "Sleeping for $sleep_time seconds till next vote"

                sleep "$sleep_time"
            fi
        done
    fi

    :info "Vote ring is done!"
}

:main "${@}" </dev/null
