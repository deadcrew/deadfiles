#!/bin/bash

:execute-command-template() {
    local file_name="$1"
    shift

    local name

    for name in "${@}"; do
        printf "%q " "${name//%s/\$file_name}"
    done
}

:eval-command-on-file-name() {
    local file_name="$1"
    shift

    local command=$(:execute-command-template "$file_name" "$@")

    :export-environment "$file_name"

    echo "$ $command"
    (
        eval -- "$command"
    )
}

:export-environment() {
    local file_name="$1"

    export FILE=$file_name
    export EXT=$(:get-file-extension $file_name)
}

:get-file-extension() {
    local file_name="$1"

    sed 's/.*\.//g' <<< "$file_name"
}

:blue() {
    echo -e '\e[1;44;1;37m '"${@}"' \e[0m'
}

:red() {
    echo -e '\e[1;41;1;37m '"${@}"' \e[0m'
}

:green() {
    echo -e '\e[1;42;1;30m '"${@}"' \e[0m'
}

:is-run-step() {
    local run_number="$1"
    local run_step="$2"
    test $(( $run_number % $run_step )) -eq 0
}

:wait-changed-files() {
    local events="$1"
    local directory="$2"

    inotifywait -r -m -e $events --format %w%f $directory 2>/dev/null
}

:parse-opts() {
    local _opts=$1
    local _args=$2

    shift 2

    eval set -- "$(getopt -o w:he:d: -- "${@}")"
    while [ $# -gt 0 ]; do
        case $1 in
            -w)
                shift
                eval $_opts\[wait\]=$1
                ;;
            -e)
                shift
                eval $_opts\[events\]=$1
                ;;
            -d)
                shift
                eval $_opts\[dir\]=$1
                ;;
            --)
                shift
                break
                ;;
            *)
                ;&
            -h)
                :usage
                exit 1
        esac

        shift
    done

    eval $_args='("$@")'
}

:usage() {
        cat <<HELP
Usage:
    watcher [-we] <pattern> [<run_step>] <command>...

Examples:
    $ watcher *.sh
        > will echo modified .sh filename

    $ watcher *.sh bash
        > will run modified .sh filename

    $ watcher -e close_write *.sh bash
        > will run modified .sh filename only on close_write

    $ watcher *.sh 2 bash
        > will run every second .sh filename

Options:
    <pattern>     Used to match file name and run command only if matched.
    <command>     Command to run, '%s' will be replaced with file name.
    <run_step>    Used, if passed as number. Command will run only after
                   <pattern> get matched specified number of times.
    -w <timeout>  Kill task after specified time was passed.
                   Task will be killed with 'TERM'.
    -e <events>   Run specified command only on <events. [default: modify].
                  Most usable are: modify, close_write.
    -d <dir>      Specify directory where watcher should
                   wait for events in. [default: .].
HELP

}

:watchdog() {
    sleep $1
    kill 2>/dev/null -TERM $(
    pstree -p $2 \
        | grep -o '([0-9]\+)' \
        | grep -o '[0-9]\+'
    )


    :red "$2 killed after ${1}sec timeout"
}

:lock() {
    if [ -f "$_lockfile" ]; then
        return 1
    else
        touch $_lockfile
    fi
}

:unlock() {
    rm -f $_lockfile
}

:run-command() {
    local file_name="$1"
    local wait="$2"
    local command=("${@:3}")

    local exitcode="0"

    if [ "$wait" -gt 0 ]; then
        ( :eval-command-on-file-name "$file_name" "${command[@]}" ) &
        local child=$!

        ( :watchdog $wait $child ) &

        local watchdog=$!

        {
            wait $child
            exitcode="$?"

            kill $watchdog
            wait $watchdog
        } 2>/dev/null
    else
        :eval-command-on-file-name "$file_name" "${command[@]}"
        exitcode="$?"
    fi

    return "$exitcode"
}

:main() {
    local opts
    local args=()

    typeset -A opts

    opts[wait]=0
    opts[events]="modify"
    opts[dir]="."

    :parse-opts opts args "${@}"

    set -- "${args[@]}"

    if [ $# -eq 0 ]; then
        :usage

        exit 1
    fi

    local _lockfile=/tmp/watcher.$(md5sum <<< "$(pwd): $@" | awk '{print $1}')
    trap :unlock EXIT

    if [ "$1" ]; then
        local pattern=${1:-.}
        shift
    fi

    local run_step=1
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        local run_step=$1
        shift
    fi

    local command=("${@:-echo %s}")

    local current_step=0

    :wait-changed-files "${opts[events]}" "${opts[dir]}" \
        | while read file_name
    do
        if ! grep -qE "$pattern" <<< "$file_name"; then
            continue
        fi

        current_step=$(( $current_step + 1 ))

        if ! :is-run-step $current_step $run_step; then
            continue
        fi

        if :lock; then
            {
                if [ $run_step -gt 1 ]; then
                    :blue "($current_step % $run_step)" "$file_name"
                else
                    :blue "$file_name"
                fi

                :run-command "$file_name" ${opts[wait]} "${command[@]}"
                exitcode="$?"

                if [[ "$exitcode" -gt 0 ]]; then
                    :red "exit code $exitcode"
                else
                    :green "ok"
                fi

                :unlock
            } &
        fi
    done
}


:main "${@}"
