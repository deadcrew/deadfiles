#!/bin/bash

set -euo pipefail

:execute-command-template() {
    local filename="$1"
    shift

    local arg

    for arg in "${@}"; do
        # %q for commands like:
        #   watcher . -- zsh -ic 'echo 1 2 3'
        printf "%q " "${arg//%s/$filename}"
    done
}

:eval-command-on-file-name() {
    local filename="$1"
    shift

    local command=$(:execute-command-template "$filename" "$@")

    :export-environment "$filename"

    printf " > \e[1m%s\e[0m\n" "$command"
    ( script --return -qc "$command" /dev/null ) \
        | :indent
}

:export-environment() {
    local filename="$1"

    export FILE=$filename
    export EXT=$(:get-file-extension $filename)
}

:get-file-extension() {
    local filename="$1"

    sed 's/.*\.//g' <<< "$filename"
}

:indent() {
    sed -ur 's/^/   /'
}

:blue() {
    echo -e '\e[48;5;18m:: \e[1m'"${@}"' \e[0m'
}

:red() {
    echo -e '\e[48;5;124;38;5;209m:: \e[1m'"${@}"' \e[0m'
}

:green() {
    echo -e '\e[48;5;28;38;5;83m:: \e[1m'"${@}"' \e[0m'
}

:is-run-step() {
    local run_number="$1"
    local run_step="$2"
    test $(( $run_number % $run_step )) -eq 0
}

:wait-changed-files() {
    local events="$1"
    local directory="$2"

    inotifywait -r -m -e $events --format %w%f $directory 2>/dev/null
}

:parse-opts() {
    local _opts=$1
    local _args=$2

    shift 2

    eval set -- "$(getopt -o w:he:d:t: -- "${@}")"
    while [ $# -gt 0 ]; do
        case $1 in
            -w)
                shift
                eval $_opts\[wait\]=$1
                ;;
            -e)
                shift
                eval $_opts\[events\]=$1
                ;;
            -d)
                shift
                eval $_opts\[dir\]=$1
                ;;
            -t)
                shift
                eval $_opts\[delay\]=$1
                ;;
            --)
                shift
                break
                ;;
            *)
                ;&
            -h)
                :usage
                exit 1
        esac

        shift
    done

    eval $_args='("$@")'
}

:usage() {
        cat <<HELP
Usage:
    watcher [-we] <pattern> [<run_step>] <command>...

Examples:
    $ watcher .sh$
        > will echo modified .sh filename

    $ watcher .sh$ bash %s
        > will run modified .sh filename

    $ watcher -e close_write .sh$ bash %s
        > will run modified .sh filename only on close_write

    $ watcher .sh$ 2 bash %s
        > will run every second .sh filename

    $ watcher .
        > will watch current directiory for changes

    $ watcher ./bin/watcher
        > will watch ./bin/watcher for changes

Options:
    <pattern>     Used to match file name and run command only if matched.
                   Can be:
                   - regular expression (like in "grep -P");
                   - "." to watch all files;
                   - filename, if it contains "/".
    <command>     Command to run, '%s' will be replaced with file name.
    <run_step>    Used, if passed as number. Command will run only after
                   <pattern> get matched specified number of times.
    -w <timeout>  Kill task after specified time was passed.
                   Task will be killed with 'TERM'.
    -e <events>   Run specified command only on <events. [default: modify].
                  Most usable are: modify, close_write.
    -d <dir>      Specify directory where watcher should
                   wait for events in. [default: .].
    -t <timeout>  Wait for <timeout> before running command, effectively
                   discarding all file change bursts that occur in short
                   period of time.
HELP

}

:watchdog() {
    sleep $1
    kill 2>/dev/null -TERM $(
    pstree -p $2 \
        | grep -o '([0-9]\+)' \
        | grep -o '[0-9]\+'
    )


    :red "$2 killed after ${1}sec timeout"
}

:lock() {
    if [ -f "$1" ]; then
        return 1
    else
        touch $1
    fi
}

:unlock() {
    rm -f "$1"
}

:run-command() {
    local filename="$1"
    local wait="$2"
    local command=("${@:3}")

    local exitcode="0"

    if [ "$wait" -gt 0 ]; then
        ( :eval-command-on-file-name "$filename" "${command[@]}" ) &
        local child=$!

        ( :watchdog $wait $child ) &

        local watchdog=$!

        {
            wait $child
            exitcode="$?"

            kill $watchdog
            wait $watchdog
        } 2>/dev/null
    else
        :eval-command-on-file-name "$filename" "${command[@]}"
    fi
}

:main() {
    local opts
    local args=()

    typeset -A opts

    opts[wait]=0
    opts[events]="modify"
    opts[dir]="."
    opts[delay]=0

    :parse-opts opts args "${@}"

    set -- "${args[@]}"

    if [ $# -eq 0 ]; then
        :usage

        exit 1
    fi

    local lockfile=/tmp/watcher.$(md5sum <<< "$(pwd): $@" | awk '{print $1}')
    trap ":unlock $lockfile" EXIT

    if [ "$1" ]; then
        local pattern=${1:-.}
        shift
    fi

    local run_step=1
    if [[ $1 =~ ^-?[0-9]+$ ]]; then
        local run_step=$1
        shift
    fi

    local grep_pattern_type='P'
    if [[ "$pattern" =~ "/" ]]; then
        grep_pattern_type='F'
    fi

    local command=("echo" "%s")
    local current_step=0

    if [[ "$*" ]]; then
        command=("$@")
    fi

    local runner

    { coproc runner {
        :runner "$lockfile" "${opts[wait]}" "${command[@]}"
    } >&3; } 3>&1

    local pending_pid

    { :wait-changed-files "${opts[events]}" "${opts[dir]}" \
        | while read filename; do
            if ! grep -q${grep_pattern_type} "$pattern" <<< "$filename"
            then
                continue
            fi

            current_step=$(( $current_step + 1 ))

            if ! :is-run-step $current_step $run_step; then
                continue
            fi

            if [[ "${opts[delay]}" > 0 ]]; then
                if kill -PIPE "${pending_pid:-}" 2>/dev/null; then
                    : delayed
                fi
            fi

            { sleep "${opts[delay]}" && printf '%s\n' "$filename" >&3; } &

            pending_pid=$!
        done; } 3>&${runner[1]}
}

:runner() {
    local lockfile=$1
    local wait=$2
    shift 2

    local command=("$@")

    local filename

    while read filename; do
        if :lock "$lockfile"; then
            {
                :blue "$filename"

                if :run-command "$filename" $wait "${command[@]}"; then
                    :green "ok"
                else
                    :red "exit code $?"
                fi

                :unlock "$lockfile"
            } &
        fi
    done
}

:main "${@}"
