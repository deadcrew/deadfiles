#!/bin/bash

set -euo pipefail

:get-commit-ref() {
    local commit=$1
    git show-ref | grep -P "$commit refs/remotes/origin/(?!HEAD)" \
    | rev | cut -f1 -d"/" | rev
}

:is-commit-an-origin-reference() {
    local commit=$1
    git show-ref | grep -qP "$commit refs/remotes/origin/(?!HEAD)"
}

:get-parents() {
    local commit=$1
    git rev-list --parents $commit
}

:get-prev-commit() {
    local commit=$1
    :get-parents $commit | head -n1 | cut -d' ' -f2
}

:get-destination-branch() {
    local head=$1
    local prev_commit=$(:get-prev-commit $head)

    if :is-commit-an-origin-reference $prev_commit; then
        :get-commit-ref $prev_commit
    elif [[ $(:get-parents $prev_commit | wc -l) != 1 ]]; then
        :get-destination-branch $prev_commit
    fi
}

:get-project() {
    git remote get-url origin | sed 's/.git$//' | sed 's|://||' \
        | cut -d'/' -f2
}

:get-repository() {
    git remote get-url origin | rev | cut -d/ -f1 | rev | sed 's/.git$//'


}

:get-source-branch() {
    git symbolic-ref HEAD --short
}

:create-pull-request() {
    local project="$1"
    local repository="$2"
    local source="$3"
    local destination="$4"
    local title="$5"
    local description="${6:-}"

    stacket pull-requests create \
        $project $repository \
        $source $destination \
        -t "$title" \
        -d "$description" \
        | grep -P '/pull-requests/'
}

:parse-opts() {
    local _opts=$1

    shift 1

    eval set -- $(getopt -o "hvxt:d:r:b:" -- "${@}")
    while [ $# -gt 0 ]; do
        case $1 in
            -x)
                eval $_opts\[dryrun\]=true
                ;;
            -v)
                eval $_opts\[verbose\]=true
                ;;
            -t)
                shift
                eval $_opts\[title\]="\$1"
                ;;
            -d)
                shift
                eval $_opts\[description\]="\$1"
                ;;
            -b)
                shift
                eval $_opts\[destination\]="\$1"
                ;;
            -h)
                :usage
                exit 1
        esac

        shift
    done
}

:add-git-config() {
    local basename=$1
    local key=$2
    local value=$3
    git config --local $basename.$key $value
}

:usage() {
        cat <<HELP
Usage:
    stacket-pull-request-create [-h] [-d] [-v] [-b=]

Examples:
    $ stacket-pull-request-create
        > will create current branch to it's parent branch pull request

    $ stacket-pull-request-create -x
        > will print source and destination branch and exit

    $ stacket-pull-request-create -t "hello world"
        > will create pull-request and set title to "hello world"

Options:
    -b <branch>  Specify destination branch.
    -v           Be verbose.
    -x           Dry run mode.
    -h           Print this text.
HELP

}

:main() {
    local opts
    typeset -A opts

    opts[dryrun]=false
    opts[verbose]=false
    opts[title]=""
    opts[description]=""
    opts[destination]=""

    :parse-opts opts "${@}"

    local source=$(:get-source-branch)
    if ${opts[verbose]}; then
        echo source branch: $source
    fi

    local destination=${opts[destination]}
    local destination=${destination:-$(:get-destination-branch HEAD)}
    local destination=${destination:-master}

    if [[ "$source" == "$destination" ]]; then
        echo
        echo "can't determine destination for: $source"
        echo "please, specify manually via -b flag"
        exit 1
    fi

    if ${opts[verbose]}; then
        echo "destination branch: $destination"
    fi

    local project=$(:get-project)
    local repository=$(:get-repository)

    if ${opts[dryrun]} ; then
        echo "project: $project"
        echo "repository: $repository"
        echo "$source -> $destination"
        exit 0
    fi

    local url=""
    url=$(
        :create-pull-request \
            $project $repository \
            $source $destination \
            "${opts[title]}" "${opts[description]}"
    )

    echo "$url"

    :add-git-config pull-request.$source to $destination
    :add-git-config pull-request.$source url $url
}

:main "${@}"
