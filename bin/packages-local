#!/bin/bash
arg_local=false
arg_aur=false
arg_version=false

while getopts "alvh" arg; do
    case $arg in
        a)
            arg_aur=true
            ;;
        l)
            arg_local=true
            ;;
        v)
            arg_version=true
            ;;
        h)
            echo "-a -- only aur packages"
            echo "-l -- only local packages"
            echo "-v -- show versions"
            exit 1
            ;;
    esac
done

:extract-package-name() {
    awk '/^local\// { sub(/^local\//, "", $1); print $1; }'
}

:get-all-packages() {
    yaourt -Q | :extract-package-name
}

:sync-info-packages() {
    tr ' ' '\n' <<< "$@" \
        | xargs -n1 -P50 -I{} bash -c '
        curl -s "https://aur.archlinux.org/rpc/?v=5&type=info&arg\[\]={}" \
            | jq -r "
            if .resultcount == 0 then
                \"local {}\"
            else
                \"aur {}\"
            end"' \
        | sort
}

:filter-aur() {
    awk '/^aur/ { print $2 }'
}

:filter-local() {
    awk '/^local/{ print $2 }'
}

:get-package-version() {
    pacman -Q $1 | awk '{print $2}'
}

packages=$(:get-all-packages)
if $arg_aur || $arg_local; then
    info=$(:sync-info-packages ${packages[@]})
    packages=($(
        case true in
            $arg_aur)
                :filter-aur <<< "$info"
                ;;
            $arg_local)
                :filter-local <<< "$info"
                ;;
        esac
    ))
fi

for package in "${packages[@]}"; do
    echo -n "$package"
    if $arg_version; then
        echo -n " "$(:get-package-version $package)
    fi
    echo
done
