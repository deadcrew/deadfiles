#!/bin/bash

### crypt â€” encrypted device helper.
###
### Usage:
###     crypt [-O] [-e <cmd>]
###     crypt -I [device]
###     crypt -C
###     crypt -h | --help
###
### Options:
###     -I  Init crypt device (this option will ERASE it).
###     -O  Autodetect and open encrypted device.
###     -e --exec <cmd> Execute specified command after openning encrypted
###                       device.
###     -C  Close previously opened encryped device

source /usr/share/bash/opts/opts.bash

set -euo pipefail

:main() {
    local disk
    local path

    local -A opts
    local -a args

    opts:parse opts args -O: -I: -e: --exec: -C -h --help -- "$@"

    if [[ "${opts[-h]:-}" || "${opts[--help]:-}" ]]; then
        :help
        exit 0
    fi

    if [[ "${opts[-I]:-}" ]]; then
        :init "${opts[-I]}"

        return
    fi


    local exec="${opts[-e]:-${opts[--exec]:-}}"

    disk="${opts[-O]:-}"
    path="$disk"
    if [[ ! "${path:-}" ]]; then
        for disk in /dev/disk/by-path/*; do
            if sudo cryptsetup isLuks "$disk"; then
                path=$(readlink -f "$disk")
                break
            fi
        done
    fi

    if [[ ! "${path:-}" ]]; then
        :info 'Encrypted device not found.'
        exit 1
    fi

    local name=$(md5sum <<< $disk | awk '{print $1}')
    local target="/mnt/crypt-$name"

    if [[ "${opts[-C]:-}" ]]; then
        :close "$name"

        exit 0
    fi

    :info "Device: $name"

    if findmnt "$target" > /dev/null; then
        local link="$(:get-link "$target")"
        if [[ "$link" ]]; then
            :shell "$link" "$exec"
        else
            :shell "$target" "$exec"
        fi

        return
    fi

    sudo cryptsetup open "$path" "$name"

    sudo mkdir -p "$target"

    sudo mount "/dev/mapper/$name" "$target"

    local link="$(:get-link "$target")"
    if [[ "$link" ]]; then
        :link "$target" "$link"

        target="$link"
    fi

    if [[ -d "${target}/systemd/" ]]; then
        find "${target}/systemd/" -name "*.service" | while read filename; do
            local service="$(basename "${filename}")"
            :info "Service linked-runtime: ${service}"
            if [[ !  -e /var/run/systemd/system/${service} ]]; then
                sudo ln -s "${filename}"" /var/run/systemd/system/${service}"
            fi
        done
    fi

    :shell "$target" "$exec"
}

:help() {
    sed -rn 's/^### ?//;T;p' "$0"
}


:info() {
    echo "$(highlight bold)$*$(highlight reset)" >&2
}

:debug() {
    echo "$*" >&2
}

:get-link() {
    local target=$1

    if [[ -f "$target/.link" ]]; then
        cat "$target/.link"
    fi
}

:link() {
    local target=$1
    local link=$2

    if [[ -e "$link" ]]; then
        sudo unlink "$link"
        sudo rm -f "$link"
    fi

    sudo ln -s "$target" "$link"
}

:shell() {
    local dir="$1"
    local cmd="$2"

    if [[ "$cmd" ]]; then
        :info "Executing: $cmd"
        cd "$dir" && $SHELL -c "$cmd"
    fi

    :info 'Starting shell at encrypted device.'

    cd "$dir" && exec $SHELL -i
}

:init() {
    local device=$1

    sudo cryptsetup luksFormat "$device"
}

:close() {
    local name=$1

    local mountpoint="/dev/mapper/$name"

    if [[ ! -e "$mountpoint" ]]; then
        printf "Encrypted device is not opened.\n"

        exit 1
    fi

    local pids=$(lsof -Fpc "$mountpoint" | grep -Po 'p\K\d+')

    if [[ "$pids" ]]; then
        printf "Device is busy, because it's used by following PIDs:\n\n"

        ps -o user,pid,start,command f $pids

        printf "\nDo you want to kill them before umount? [Y/n] "

        local answer

        read answer

        if [[ "${answer:-Y}" == "Y" ]]; then
            kill -1 $pids

            local try_max=10
            local try=0
            while kill -0 $pids 2>/dev/null; do
                try=$((try+1))

                sleep 0.5

                if [[ $try -ge $try_max ]]; then
                    printf "\nDo you want to kill them using SIGKILL? [Y/n] "
                    read answer

                    if [[ "${answer:-Y}" == "Y" ]]; then
                        kill -9 $pids
                        try=0

                        continue
                    fi

                    break
                fi
            done
        fi
    fi

    sudo umount "$mountpoint"
    sudo cryptsetup close "$name"
}

:main "$@"
