#!/bin/bash

set -euo pipefail

:main() {
    local target="$(readlink -f $1)"

    local storage=$(:get-storage-path "$target")

    if ! :storage-exists "$target"; then
        :storage-create "$target"
    fi

    if ! findmnt "$target" &>/dev/null; then
        :ramfs-create "$target"
    fi

    local sync_pid
    trap ':trap-exit' EXIT

    :sync-once "$storage" "$target"

    :sync-continious "$target" "$storage" &
    sync_pid=$!
    wait $sync_pid
}

:kill-tree() {
    local pid="$1"
    local pgid=$(ps -o pgid "$pid" | grep -o '[0-9]*')
    kill -SIGTERM $pgid
}

:trap-exit() {
    echo "got exit signal, restoring fs"

    echo "killing tree $sync_pid"
    :kill-tree "$sync_pid"
    echo "waiting tree $sync_pid"
    if ! wait "$sync_pid"; then
        :
    fi

    echo "sync once"
    :sync-once "$target" "$storage"
    echo "umount"
    until sudo umount "$target"; do
        sleep 1
    done
    sudo rm -rf "$target"
    sudo mv "$storage" "$target"
}

:sync-continious() {
    local target="$1"
    local storage="$2"
    echo "continious sync $target/ -> $storage/"

    cd "$target"
    watcher \
        -e 'modify,close_write' \
        '.' -- \
            sudo rsync -av "$target/" "$storage/"
}

:ramfs-create() {
    local dir="$1"
    mkdir -p "$dir"
    sudo mount -t tmpfs -o size=512m tmpfs "$dir"
}

:sync-once() {
    local src="$1"
    local dst="$2"
    :log "sync $src -> $dst"
    mkdir -p "$dst"
    sudo rsync -av "$src/" "$dst/"
}

:storage-create() {
    local target="$1"
    mv "$target" "$(:get-storage-path "$target")"
}

:get-storage-path() {
    local target="$1"
    echo "$(dirname "$target")/rams.storage.$(basename "$target")"
}

:storage-exists() {
    test -d "$(:get-storage-path "$1")"
}

:log() {
    echo "$*" >&2
}

:main "$@"
